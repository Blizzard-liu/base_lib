apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries
//https正式服务器的接口
def API_RELEASE_HOST = "\"https://app.win-sky.com.cn:9001\""
//阿里测试服务器的接口
def API_BETA_HOST = "\"http://wp.win-sky.com.cn:16903\""
//合肥测试服务器对外的接口
def API_DEBUG_HOST = "\"http://hefei.win-sky.com.cn:2180\""

android {
    compileSdkVersion cfg.compileSdkVersion
    defaultConfig {
        applicationId cfg.applicationId
        minSdkVersion cfg.appMinSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        resConfigs "zh-rCN", "zh-rHK", "zh-rTW", "en"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        packagingOptions {
            exclude 'META-INF/rxjava.properties'
        }

        //是否输出日志
        buildConfigField "boolean", "LOG_DEBUG", "true"
        buildConfigField "String", "ServerName", '"内部云服务器"'
        buildConfigField "String", "API_HOST", "${API_DEBUG_HOST}"
        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"

    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }


    signingConfigs {
        release {
            storeFile file(STORE_FILE_PATH)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        debug {

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    APP_NAME      : "@string/app_name_debug",
                    APPLICATION_ID: cfg.applicationId,
                    MAP_KEY       : MAP_KEY
            ]
            //设置debug版本包含x86的so文件
            ndk {
                abiFilters "armeabi"
            }
        }
        release {

            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
                // 移除无用的resource文件
                shrinkResources true
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    APP_NAME      : "@string/app_name",
                    APPLICATION_ID: cfg.applicationId,
                    MAP_KEY       : MAP_KEY
            ]

            //设置release版本只包含armeabi和armeabi-v7a的so包
            ndk {
                abiFilters "armeabi"
            }

        }

    }

    productFlavors {
        prod {

            //是否输出日志
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "ServerName", '"正式服务器"'
            //url动态替换,正式url
            buildConfigField "String", "API_HOST", "${API_RELEASE_HOST}"
        }

        stage {

            //是否输出日志
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "ServerName", '"阿里云服务器"'
            //url动态替换,正式url
            buildConfigField "String", "API_HOST", "${API_BETA_HOST}"
        }

        dev {

            //是否输出日志
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "ServerName", '"内部云服务器"'
            //url动态替换,正式url
            buildConfigField "String", "API_HOST", "${API_DEBUG_HOST}"
        }
    }


    // 输出文件配置，渠道包是这种格式的：app-{版本号}-{渠道名称}.apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile

            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 输出文件夹所在的位置
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/" + variant.buildType.name)

                def fileName = "Demo_V${defaultConfig.versionName}_${buildTime()}_${variant.buildType.name}.apk"

                outputFileName = fileName
            }
        }
    }
}

static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH-mm', TimeZone.getTimeZone("UTC"))
    return formattedDate
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':base_lib')
}
